import os
from aiogram import Router, F, types
from aiogram.types import Message, FSInputFile
from aiogram.enums import ChatType 
from aiogram.fsm.context import FSMContext
from datetime import datetime
from aiogram.enums import ParseMode
from aiogram.filters import or_f
from aiogram.types import CallbackQuery

from app.states import Form
from app.keyboards import get_cancel_keyboard, get_main_keyboard, get_patrol_keyboard, get_patrol_step_keyboard
from app.image_processor import ImageProcessor
from app.config import GROUP_ID
from app.utils import get_moscow_time
from app.google_sheets import gs_logger
from app.keyboards import get_resolved_keyboard

router = Router()


async def process_problem_photo(message: Message, state: FSMContext, problem_description: str = None):
    data = await state.get_data()
    patrol_type = data.get('patrol_type', '–û–±—Ö–æ–¥')
    current_step = data.get('patrol_step', 1)
    
    file_id = message.photo[-1].file_id
    file = await message.bot.get_file(file_id)
    input_path = f"app/data/temp_{file_id}.jpg"
    await message.bot.download_file(file.file_path, destination=input_path)

    current_time = get_moscow_time().strftime("%Y-%m-%d %H:%M:%S")
    output_path = f"app/data/output_{file_id}.jpg"

    processor = ImageProcessor()
    processor.add_text_with_outline(input_path, output_path, current_time)

    output_file = FSInputFile(output_path)

    caption = (
        f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ (–ø—Ä–∏ {patrol_type}, –º–µ—Ç–∫–∞ {current_step})\n"
        f"‚è∞ –í—Ä–µ–º—è: {current_time}"
    )
    if problem_description:
        caption += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {problem_description}"
    elif message.caption:
        caption += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {message.caption}"

    sent_message = await message.bot.send_photo(
        chat_id=GROUP_ID,
        photo=output_file,
        caption=caption,
        parse_mode=ParseMode.HTML,
        reply_markup=get_resolved_keyboard()   # üîë –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    )

    try:
        await message.bot.pin_chat_message(GROUP_ID, sent_message.message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    os.remove(input_path)
    os.remove(output_path)

    await gs_logger.log_event(
        "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ",
        message.from_user.id,
        sent_message.message_id,
        problem_description if problem_description else (message.caption if message.caption else "–§–æ—Ç–æ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
    )

    return sent_message


# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–±—Ö–æ–¥"
@router.message(F.chat.type == ChatType.PRIVATE, F.text == "üîÑ –û–±—Ö–æ–¥")
async def handle_patrol_selection(message: Message, state: FSMContext):
    await state.set_state(Form.patrol_selection)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ö–æ–¥–∞:",
        reply_markup=get_patrol_keyboard()
    )

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@router.callback_query(Form.patrol_selection, F.data == "patrol_base1")
async def handle_base1_selection(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.base1_patrol)
    await state.update_data(patrol_step=1, photo_paths=[], patrol_type="–û–±—Ö–æ–¥ –ë–∞–∑—ã 1", problems={})
    await callback.message.answer(
        "üîÑ –û–±—Ö–æ–¥ –ë–∞–∑—ã 1 - –ú–µ—Ç–∫–∞ 1:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
        "3. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –Ω–∞ –º–µ—Ç–∫–µ 1\n"
        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ\n"
        "5. –ï—Å–ª–∏ –≤ —Ö–æ–¥–µ –æ–±—Ö–æ–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"‚ùóÔ∏è –ù–∞—Ä—É—à–µ–Ω–∏–µ\" –∏ –æ–ø–∏—à–∏—Ç–µ –µ–µ",
        reply_markup=get_patrol_step_keyboard()
    )
    await callback.answer()

@router.callback_query(Form.patrol_selection, F.data == "patrol_atp")
async def handle_atp_selection(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.atp_patrol)
    await state.update_data(patrol_step=1, photo_paths=[], patrol_type="–û–±—Ö–æ–¥ –ê–¢–ü", problems={})
    await callback.message.answer(
        "üîÑ –û–±—Ö–æ–¥ –ê–¢–ü - –ú–µ—Ç–∫–∞ 1:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
        "3. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –Ω–∞ –º–µ—Ç–∫–µ 1\n"
        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ\n"
        "5. –ï—Å–ª–∏ –≤ —Ö–æ–¥–µ –æ–±—Ö–æ–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"‚ùóÔ∏è –ù–∞—Ä—É—à–µ–Ω–∏–µ\" –∏ –æ–ø–∏—à–∏—Ç–µ –µ–µ",
        reply_markup=get_patrol_step_keyboard()
    )
    await callback.answer()

@router.callback_query(Form.patrol_selection, F.data == "patrol_base2")
async def handle_base2_selection(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.base2_patrol)
    await state.update_data(patrol_step=1, photo_paths=[], patrol_type="–û–±—Ö–æ–¥ –ë–∞–∑—ã 2", problems={})
    await callback.message.answer(
        "üîÑ –û–±—Ö–æ–¥ –ë–∞–∑—ã 2 - –ú–µ—Ç–∫–∞ 1:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
        "3. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –Ω–∞ –º–µ—Ç–∫–µ 1\n"
        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ\n"
        "5. –ï—Å–ª–∏ –≤ —Ö–æ–¥–µ –æ–±—Ö–æ–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"‚ùóÔ∏è –ù–∞—Ä—É—à–µ–Ω–∏–µ\" –∏ –æ–ø–∏—à–∏—Ç–µ –µ–µ",
        reply_markup=get_patrol_step_keyboard()
    )
    await callback.answer()
    
async def process_patrol_photo(message: Message, state: FSMContext, patrol_type: str):
    data = await state.get_data()
    current_step = data.get('patrol_step', 1)
    photo_paths = data.get('photo_paths', [])
    problems = data.get('problems', {}) 
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–æ—Ç–æ
    photo_time = get_moscow_time()
    current_time_str = photo_time.strftime("%Y-%m-%d %H:%M:%S")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–ª–æ–∂–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
    file_id = message.photo[-1].file_id
    file = await message.bot.get_file(file_id)
    input_path = f"app/data/temp_{file_id}.jpg"
    await message.bot.download_file(file.file_path, destination=input_path)
    
    # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Ñ–æ—Ç–æ
    output_path = f"app/data/output_{file_id}.jpg"
    
    processor = ImageProcessor()
    processor.add_text_with_outline(input_path, output_path, current_time_str)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É —Ñ–æ—Ç–æ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
    photo_paths.append({
        'path': output_path,
        'time': photo_time  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–∏, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É
    })
    await state.update_data(photo_paths=photo_paths)
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(input_path)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
    if current_step < 5:
        next_step = current_step + 1
        await state.update_data(patrol_step=next_step)
        await message.answer(
            f"üîÑ {patrol_type} - –ú–µ—Ç–∫–∞ {next_step}:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
            f"3. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –Ω–∞ –º–µ—Ç–∫–µ {next_step}\n"
            "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ\n"
            "5. –ï—Å–ª–∏ –≤ —Ö–æ–¥–µ –æ–±—Ö–æ–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"‚ùóÔ∏è –ù–∞—Ä—É—à–µ–Ω–∏–µ\" –∏ –æ–ø–∏—à–∏—Ç–µ –µ–µ",
            reply_markup=get_patrol_step_keyboard()
        )
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–±–ª–µ–º
        caption = f"{patrol_type}"
        if problems:
            problem_points = ", ".join([f"–º–µ—Ç–∫–∞ {k}" for k in problems.keys()])
            # caption += f"\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞: {problem_points}"
        
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        media = []
        media_caption = ""
        for i, photo_data in enumerate(photo_paths, 1):
            photo_time_str = photo_data['time'].strftime("%Y-%m-%d %H:%M:%S")
            media_caption += f"{caption}\n–ú–µ—Ç–∫–∞ {i} - {photo_time_str}"
            
            if str(i) in problems:
                media_caption += f"\n–ü—Ä–æ–±–ª–µ–º–∞: {problems[str(i)]}"
 
        
        for i, photo_data in enumerate(photo_paths, 1):
            if i == 1:
                media.append(types.InputMediaPhoto(
                    media=FSInputFile(photo_data['path']),
                    caption=media_caption,
                ))
            else:
                media.append(types.InputMediaPhoto(
                    media=FSInputFile(photo_data['path'])
                ))
        
        sent_message = await message.bot.send_media_group(
            chat_id=GROUP_ID,
            media=media
        )

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await gs_logger.log_event(
            patrol_type,
            message.from_user.id,
            sent_message[0].message_id,
            "–ü—Ä–æ–±–ª–µ–º—ã: " + ", ".join(problems.values()) if problems else "–£—Å–ø–µ—à–Ω–æ"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for photo_data in photo_paths:
            if os.path.exists(photo_data['path']):
                os.remove(photo_data['path'])
        
        await state.clear()
        await message.answer(f"‚úÖ {patrol_type} –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É.", reply_markup=get_main_keyboard())

@router.callback_query(
    or_f(Form.base1_patrol, Form.atp_patrol, Form.base2_patrol), 
    F.data == "report_problem"
)
async def handle_problem_report(callback: CallbackQuery, state: FSMContext):
    previous_state = await state.get_state()
    await state.update_data(previous_state=previous_state)
    
    data = await state.get_data()
    current_step = data.get('patrol_step', 1)
    
    
    await state.set_state(Form.patrol_problem)
    await state.update_data(problem_step=current_step)
    
    await callback.message.answer(
        "–°–¥–µ–ª–∞–π—Ç–µ –§–û–¢–û –ø—Ä–æ–±–ª–µ–º—ã –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ. –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¢–ï–ö–°–¢ –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ:",
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()

@router.message(Form.patrol_problem, F.photo)
async def handle_problem_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    problem_step = data.get('problem_step')
    patrol_type = data.get('patrol_type', '–û–±—Ö–æ–¥')

    description = message.caption if message.caption else "–§–æ—Ç–æ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ–±–ª–µ–º—ã
    await process_problem_photo(message, state, description)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –æ–±—Ö–æ–¥
    file_id = message.photo[-1].file_id
    file = await message.bot.get_file(file_id)
    input_path = f"app/data/temp_{file_id}.jpg"
    await message.bot.download_file(file.file_path, destination=input_path)

    current_time = get_moscow_time()
    output_path = f"app/data/output_{file_id}.jpg"

    processor = ImageProcessor()
    processor.add_text_with_outline(input_path, output_path, current_time.strftime("%Y-%m-%d %H:%M:%S"))

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ_paths
    photo_paths = data.get('photo_paths', []).copy()
    photo_paths.append({'path': output_path, 'time': current_time})

    # –û–±–Ω–æ–≤–ª—è–µ–º problems
    problems = data.get('problems', {}).copy()
    problems[str(problem_step)] = description

    await state.update_data(photo_paths=photo_paths, problems=problems)

    if os.path.exists(input_path):
        os.remove(input_path)

    await message.answer(f"‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ –º–µ—Ç–∫–µ {problem_step} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –∏ —É—á—Ç–µ–Ω–∞ –≤ –æ–±—Ö–æ–¥–µ.")

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ö–æ–¥
    current_step = data.get('patrol_step', 1)
    if current_step < 5:
        next_step = current_step + 1
        await state.update_data(patrol_step=next_step)

        previous_state = data.get("previous_state")
        if previous_state:
            await state.set_state(previous_state)

        await message.answer(
            f"üîÑ {patrol_type} - –ú–µ—Ç–∫–∞ {next_step}:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
            f"3. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –Ω–∞ –º–µ—Ç–∫–µ {next_step}\n"
            "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ\n"
            "5. –ï—Å–ª–∏ –≤ —Ö–æ–¥–µ –æ–±—Ö–æ–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"‚ùóÔ∏è –ù–∞—Ä—É—à–µ–Ω–∏–µ\" –∏ –æ–ø–∏—à–∏—Ç–µ –µ–µ",
            reply_markup=get_patrol_step_keyboard()
        )
    else:
        # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ö–æ–¥–∞
        await process_patrol_photo(message, state, patrol_type)


# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã (–µ—Å–ª–∏ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ)
# @router.message(Form.patrol_problem, F.text)
async def handle_problem_description(message: Message, state: FSMContext):
    data = await state.get_data()
    problem_step = data.get('problem_step')
    problems = data.get('problems', {})
    
    problems[str(problem_step)] = message.text
    await state.update_data(problems=problems)
    
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã:",
        reply_markup=get_cancel_keyboard()
    )
    
@router.message(F.text == "üîÑ –û–±—Ö–æ–¥ –ë–∞–∑—ã 1")
async def handle_base1_patrol(message: Message, state: FSMContext):
    await state.set_state(Form.base1_patrol)
    await state.update_data(patrol_step=1, photo_paths=[], patrol_type="–û–±—Ö–æ–¥ –ë–∞–∑—ã 1", problems={})
    await message.answer(
        "üîÑ –û–±—Ö–æ–¥ –ë–∞–∑—ã 1 - –ú–µ—Ç–∫–∞ 1:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
        "3. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –Ω–∞ –º–µ—Ç–∫–µ 1\n"
        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ\n"
        "5. –ï—Å–ª–∏ –≤ —Ö–æ–¥–µ –æ–±—Ö–æ–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"‚ùóÔ∏è –ù–∞—Ä—É—à–µ–Ω–∏–µ\" –∏ –æ–ø–∏—à–∏—Ç–µ –µ–µ",
        reply_markup=get_patrol_step_keyboard()
    )

@router.message(Form.base1_patrol, F.photo)
async def handle_base1_patrol_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    await process_patrol_photo(message, state, data.get('patrol_type', '–û–±—Ö–æ–¥ –ë–∞–∑—ã 1'))

@router.message(F.chat.type == ChatType.PRIVATE, F.text == "üîÑ –û–±—Ö–æ–¥ –ê–¢–ü")
async def handle_atp_patrol(message: Message, state: FSMContext):
    await state.set_state(Form.atp_patrol)
    await state.update_data(patrol_step=1, photo_paths=[], patrol_type="–û–±—Ö–æ–¥ –ê–¢–ü", problems={})
    await message.answer(
        "üîÑ –û–±—Ö–æ–¥ –ê–¢–ü - –ú–µ—Ç–∫–∞ 1:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
        "3. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –Ω–∞ –º–µ—Ç–∫–µ 1\n"
        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ\n"
        "5. –ï—Å–ª–∏ –≤ —Ö–æ–¥–µ –æ–±—Ö–æ–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"‚ùóÔ∏è –ù–∞—Ä—É—à–µ–Ω–∏–µ\" –∏ –æ–ø–∏—à–∏—Ç–µ –µ–µ",
        reply_markup=get_patrol_step_keyboard()
    )

@router.message(Form.atp_patrol, F.photo)
async def handle_atp_patrol_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    await process_patrol_photo(message, state, data.get('patrol_type', '–û–±—Ö–æ–¥ –ê–¢–ü'))

@router.message(F.chat.type == ChatType.PRIVATE, F.text == "üîÑ –û–±—Ö–æ–¥ –ë–∞–∑—ã 2")
async def handle_base2_patrol(message: Message, state: FSMContext):
    await state.set_state(Form.base2_patrol)
    await state.update_data(patrol_step=1, photo_paths=[], patrol_type="–û–±—Ö–æ–¥ –ë–∞–∑—ã 2", problems={})
    await message.answer(
        "üîÑ –û–±—Ö–æ–¥ –ë–∞–∑—ã 2 - –ú–µ—Ç–∫–∞ 1:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
        "3. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –Ω–∞ –º–µ—Ç–∫–µ 1\n"
        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ\n"
        "5. –ï—Å–ª–∏ –≤ —Ö–æ–¥–µ –æ–±—Ö–æ–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"‚ùóÔ∏è –ù–∞—Ä—É—à–µ–Ω–∏–µ\" –∏ –æ–ø–∏—à–∏—Ç–µ –µ–µ",
        reply_markup=get_patrol_step_keyboard()
    )

@router.message(Form.base2_patrol, F.photo)
async def handle_base2_patrol_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    await process_patrol_photo(message, state, data.get('patrol_type', '–û–±—Ö–æ–¥ –ë–∞–∑—ã 2'))