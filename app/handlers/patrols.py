import os
from aiogram import Router, F, types
from aiogram.types import Message, FSInputFile
from aiogram.enums import ChatType 
from aiogram.fsm.context import FSMContext
from datetime import datetime
from aiogram.enums import ParseMode

from app.states import Form
from app.keyboards import get_cancel_keyboard, get_main_keyboard, get_patrol_keyboard
from app.image_processor import ImageProcessor
from app.config import GROUP_ID
from app.utils import get_moscow_time
from app.google_sheets import gs_logger


router = Router()

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
from aiogram.types import CallbackQuery

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–±—Ö–æ–¥"
@router.message(F.chat.type == ChatType.PRIVATE, F.text == "üîÑ –û–±—Ö–æ–¥")
async def handle_patrol_selection(message: Message, state: FSMContext):
    await state.set_state(Form.patrol_selection)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ö–æ–¥–∞:",
        reply_markup=get_patrol_keyboard()
    )

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@router.callback_query(Form.patrol_selection, F.data == "patrol_base1")
async def handle_base1_selection(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.base1_patrol)
    await state.update_data(patrol_step=1, photo_paths=[], patrol_type="–û–±—Ö–æ–¥ –ë–∞–∑—ã 1")
    await callback.message.answer(
        "üîÑ –û–±—Ö–æ–¥ –ë–∞–∑—ã 1 - –ú–µ—Ç–∫–∞ 1:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
        "3. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –Ω–∞ –º–µ—Ç–∫–µ 1\n"
        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ",
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()

@router.callback_query(Form.patrol_selection, F.data == "patrol_atp")
async def handle_atp_selection(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.atp_patrol)
    await state.update_data(patrol_step=1, photo_paths=[], patrol_type="–û–±—Ö–æ–¥ –ê–¢–ü")
    await callback.message.answer(
        "üîÑ –û–±—Ö–æ–¥ –ê–¢–ü - –ú–µ—Ç–∫–∞ 1:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
        "3. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –Ω–∞ –º–µ—Ç–∫–µ 1\n"
        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ",
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()

@router.callback_query(Form.patrol_selection, F.data == "patrol_base2")
async def handle_base2_selection(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.base2_patrol)
    await state.update_data(patrol_step=1, photo_paths=[], patrol_type="–û–±—Ö–æ–¥ –ë–∞–∑—ã 2")
    await callback.message.answer(
        "üîÑ –û–±—Ö–æ–¥ –ë–∞–∑—ã 2 - –ú–µ—Ç–∫–∞ 1:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
        "3. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –Ω–∞ –º–µ—Ç–∫–µ 1\n"
        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ",
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()
    
async def process_patrol_photo(message: Message, state: FSMContext, patrol_type: str):
    data = await state.get_data()
    current_step = data.get('patrol_step', 1)
    photo_paths = data.get('photo_paths', [])
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–ª–æ–∂–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
    file_id = message.photo[-1].file_id
    file = await message.bot.get_file(file_id)
    input_path = f"app/data/temp_{file_id}.jpg"
    await message.bot.download_file(file.file_path, destination=input_path)
    
    # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Ñ–æ—Ç–æ
    current_time = get_moscow_time().strftime("%Y-%m-%d %H:%M:%S")
    output_path = f"app/data/output_{file_id}.jpg"
    
    processor = ImageProcessor()
    processor.add_text_with_outline(input_path, output_path, current_time)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É —Ñ–æ—Ç–æ
    photo_paths.append(output_path)
    await state.update_data(photo_paths=photo_paths)
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(input_path)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
    if current_step < 5:
        next_step = current_step + 1
        await state.update_data(patrol_step=next_step)
        await message.answer(
            f"üîÑ {patrol_type} - –ú–µ—Ç–∫–∞ {next_step}:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
            "3. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –Ω–∞ –º–µ—Ç–∫–µ {next_step}\n"
            "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ",
            reply_markup=get_cancel_keyboard()
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        media = []
        for i, photo_path in enumerate(photo_paths, 1):
            media.append(types.InputMediaPhoto(
                media=FSInputFile(photo_path),
                caption=f"{patrol_type} - –ú–µ—Ç–∫–∞ {i}\n‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}" if i == 1 else None
            ))
        
        sent_message = await message.bot.send_media_group(
            chat_id=GROUP_ID,
            media=media
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for photo_path in photo_paths:
            if os.path.exists(photo_path):
                os.remove(photo_path)
        
        await state.clear()
        await message.answer(f"‚úÖ {patrol_type} –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É.", reply_markup=get_main_keyboard())
            
        await gs_logger.log_event(  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            "–ó–≤–æ–Ω–æ–∫ –≤ –ø–æ–∂–∞—Ä–Ω—É—é —á–∞—Å—Ç—å",
            message.from_user.id,
            sent_message[0].message_id
        )

@router.message(F.text == "üîÑ –û–±—Ö–æ–¥ –ë–∞–∑—ã 1")
async def handle_base1_patrol(message: Message, state: FSMContext):
    await state.set_state(Form.base1_patrol)
    await state.update_data(patrol_step=1, photo_paths=[], patrol_type="–û–±—Ö–æ–¥ –ë–∞–∑—ã 1")
    await message.answer(
        "üîÑ –û–±—Ö–æ–¥ –ë–∞–∑—ã 1 - –ú–µ—Ç–∫–∞ 1:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
        "3. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –Ω–∞ –º–µ—Ç–∫–µ 1\n"
        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ",
        reply_markup=get_cancel_keyboard()
    )

@router.message(Form.base1_patrol, F.photo)
async def handle_base1_patrol_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    await process_patrol_photo(message, state, data.get('patrol_type', '–û–±—Ö–æ–¥ –ë–∞–∑—ã 1'))

@router.message(F.chat.type == ChatType.PRIVATE, F.text == "üîÑ –û–±—Ö–æ–¥ –ê–¢–ü")
async def handle_atp_patrol(message: Message, state: FSMContext):
    await state.set_state(Form.atp_patrol)
    await state.update_data(patrol_step=1, photo_paths=[], patrol_type="–û–±—Ö–æ–¥ –ê–¢–ü")
    await message.answer(
        "üîÑ –û–±—Ö–æ–¥ –ê–¢–ü - –ú–µ—Ç–∫–∞ 1:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
        "3. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –Ω–∞ –º–µ—Ç–∫–µ 1\n"
        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ",
        reply_markup=get_cancel_keyboard()
    )

@router.message(Form.atp_patrol, F.photo)
async def handle_atp_patrol_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    await process_patrol_photo(message, state, data.get('patrol_type', '–û–±—Ö–æ–¥ –ê–¢–ü'))

@router.message(F.chat.type == ChatType.PRIVATE, F.text == "üîÑ –û–±—Ö–æ–¥ –ë–∞–∑—ã 2")
async def handle_base2_patrol(message: Message, state: FSMContext):
    await state.set_state(Form.base2_patrol)
    await state.update_data(patrol_step=1, photo_paths=[], patrol_type="–û–±—Ö–æ–¥ –ë–∞–∑—ã 2")
    await message.answer(
        "üîÑ –û–±—Ö–æ–¥ –ë–∞–∑—ã 2 - –ú–µ—Ç–∫–∞ 1:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ ¬´üìé¬ª\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª\n"
        "3. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –Ω–∞ –º–µ—Ç–∫–µ 1\n"
        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ",
        reply_markup=get_cancel_keyboard()
    )

@router.message(Form.base2_patrol, F.photo)
async def handle_base2_patrol_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    await process_patrol_photo(message, state, data.get('patrol_type', '–û–±—Ö–æ–¥ –ë–∞–∑—ã 2'))