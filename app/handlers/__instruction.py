from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.enums import ChatType
import os
import logging

from app.keyboards import get_main_keyboard, get_instruction_keyboard

router = Router()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

logger.info("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")

# –û–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂–µ–π
INSTRUCTIONS = {
    "instruction_1": {
        "image": "/data/obhod1.jpg",
        "document": "/data/instr1.docx",
        "text": "üìã –°—Ö–µ–º–∞ –æ–±—Ö–æ–¥–∞ 1: –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏"
    },
    "instruction_2": {
        "image": "/data/obhod1.jpg", 
        "document": "/data/instr1.docx",
        "text": "üìã –°—Ö–µ–º–∞ –æ–±—Ö–æ–¥–∞ 2: –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è –∏ –æ–±—ä–µ–∫—Ç—ã"
    },
    "instruction_3": {
        "image": "/data/obhod3.jpg",
        "document": "/data/instr3.docx", 
        "text": "üìã –°—Ö–µ–º–∞ –æ–±—Ö–æ–¥–∞ 3: –ü–µ—Ä–∏–º–µ—Ç—Ä –∏ –≤–Ω–µ—à–Ω–∏–µ –∑–æ–Ω—ã"
    }
}

@router.message(F.chat.type == ChatType.PRIVATE, F.text == "üìö –ò–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂")
async def handle_instruction(message: Message):
    await message.answer(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ö–µ–º—É –æ–±—Ö–æ–¥–∞:",
        reply_markup=get_instruction_keyboard()
    )

@router.callback_query(F.data.startswith("instruction_"))
async def handle_instruction_select(callback: CallbackQuery):
    instruction_type = callback.data
    instruction = INSTRUCTIONS.get(instruction_type)
    
    if instruction:
        try:
            image_path = instruction["image"]
            doc_path = instruction["document"]
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—É—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤:")
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
            logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç: {doc_path}")
            logger.info(f"–¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
            logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ /data: {os.listdir('/data') if os.path.exists('/data') else '–ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            if not os.path.exists(image_path):
                error_msg = f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {image_path}"
                logger.error(error_msg)
                await callback.message.answer(error_msg)
                return
                
            if not os.path.exists(doc_path):
                error_msg = f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {doc_path}"
                logger.error(error_msg)
                await callback.message.answer(error_msg)
                return
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            logger.info(f"–§–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            photo = FSInputFile(image_path)
            await callback.bot.send_photo(
                chat_id=callback.from_user.id,
                photo=photo,
                caption=instruction["text"]
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            document = FSInputFile(doc_path)
            await callback.bot.send_document(
                chat_id=callback.from_user.id,
                document=document,
                caption="üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–±—Ö–æ–¥—É"
            )
            
            logger.info(f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è {instruction_type} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {e}"
            logger.error(error_msg, exc_info=True)
            await callback.message.answer(error_msg)
    else:
        await callback.message.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    await callback.answer()